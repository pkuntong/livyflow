name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily security scans at 3 AM UTC
    - cron: '0 3 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  CACHE_VERSION: 'v2'

jobs:
  unit-and-integration-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'

      - name: Cache Vite Build Cache
        uses: actions/cache@v4
        with:
          path: node_modules/.vite
          key: vite-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            vite-${{ env.CACHE_VERSION }}-${{ runner.os }}-

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            pip-${{ env.CACHE_VERSION }}-${{ runner.os }}-

      - name: Install frontend dependencies
        run: |
          npm ci --prefer-offline --no-audit --no-progress

      - name: Install backend dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup test environment variables
        run: |
          echo "VITE_FIREBASE_API_KEY=test-api-key" >> $GITHUB_ENV
          echo "VITE_FIREBASE_AUTH_DOMAIN=test.firebaseapp.com" >> $GITHUB_ENV
          echo "VITE_FIREBASE_PROJECT_ID=test-project" >> $GITHUB_ENV
          echo "VITE_FIREBASE_STORAGE_BUCKET=test-project.appspot.com" >> $GITHUB_ENV
          echo "VITE_FIREBASE_MESSAGING_SENDER_ID=123456789" >> $GITHUB_ENV
          echo "VITE_FIREBASE_APP_ID=test-app-id" >> $GITHUB_ENV
          echo "PLAID_CLIENT_ID=test-client-id" >> $GITHUB_ENV
          echo "PLAID_SECRET=test-secret" >> $GITHUB_ENV
          echo "PLAID_ENV=sandbox" >> $GITHUB_ENV

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:run

      - name: Run integration tests
        run: npm run test:run -- --run src/test/integration/

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          fail_ci_if_error: true

      - name: Start backend server
        run: |
          cd backend
          python run.py &
          echo "BACKEND_PID=$!" >> $GITHUB_ENV
          # Wait for server to start
          sleep 10

      - name: Test backend health
        run: |
          curl -f http://localhost:8000/api/health || exit 1

      - name: Stop backend server
        if: always()
        run: |
          if [ ! -z "$BACKEND_PID" ]; then
            kill $BACKEND_PID
          fi

      - name: Archive test artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chrome, firefox]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && pip install -r requirements.txt

      - name: Setup test environment
        run: |
          echo "VITE_FIREBASE_API_KEY=test-api-key" >> $GITHUB_ENV
          echo "VITE_FIREBASE_AUTH_DOMAIN=test.firebaseapp.com" >> $GITHUB_ENV
          echo "VITE_FIREBASE_PROJECT_ID=test-project" >> $GITHUB_ENV
          echo "CYPRESS_testEmail=cypress@test.com" >> $GITHUB_ENV
          echo "CYPRESS_testPassword=TestPassword123!" >> $GITHUB_ENV
          echo "CYPRESS_apiUrl=http://localhost:8000/api" >> $GITHUB_ENV

      - name: Build application
        run: npm run build

      - name: Start backend server
        run: |
          cd backend
          python run.py &
          echo "BACKEND_PID=$!" >> $GITHUB_ENV
          sleep 15

      - name: Start frontend server
        run: |
          npm run preview &
          echo "FRONTEND_PID=$!" >> $GITHUB_ENV
          sleep 10

      - name: Wait for servers
        run: |
          npx wait-on http://localhost:5173 http://localhost:8000/api/health
          curl -f http://localhost:5173 || exit 1
          curl -f http://localhost:8000/api/health || exit 1

      - name: Install Cypress
        run: npx cypress install

      - name: Run Cypress tests (Chrome)
        if: matrix.browser == 'chrome'
        run: npx cypress run --browser chrome --record
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}

      - name: Run Cypress tests (Firefox)
        if: matrix.browser == 'firefox'
        run: npx cypress run --browser firefox
        
      - name: Stop servers
        if: always()
        run: |
          if [ ! -z "$FRONTEND_PID" ]; then
            kill $FRONTEND_PID
          fi
          if [ ! -z "$BACKEND_PID" ]; then
            kill $BACKEND_PID
          fi

      - name: Archive E2E artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-artifacts-${{ matrix.browser }}
          path: |
            cypress/videos/
            cypress/screenshots/

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerable dependencies
        run: npx audit-ci --moderate

      - name: Run SAST scan
        uses: github/super-linter/slim@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_CSS: true
          VALIDATE_HTML: true
          VALIDATE_JSON: true

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Analyze bundle size
        run: |
          npx vite-bundle-analyzer dist --analyze
          # Check if bundle size is reasonable
          BUNDLE_SIZE=$(du -sh dist | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start server
        run: |
          npm run preview &
          npx wait-on http://localhost:5173

      - name: Run accessibility tests
        run: |
          npx @axe-core/cli http://localhost:5173 \
            --save accessibility-report.json \
            --reporter json
          
          # Check if there are any accessibility violations
          VIOLATIONS=$(jq '.violations | length' accessibility-report.json)
          if [ "$VIOLATIONS" -gt 0 ]; then
            echo "Found $VIOLATIONS accessibility violations"
            jq '.violations' accessibility-report.json
            exit 1
          fi

      - name: Upload accessibility report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-report
          path: accessibility-report.json

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-and-integration-tests, e2e-tests, security-tests, performance-tests, accessibility-tests]
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit & Integration | ${{ needs.unit-and-integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| End-to-End | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility | ${{ needs.accessibility-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          
          # Set overall status
          if [[ "${{ needs.unit-and-integration-tests.result }}" == "success" && 
                "${{ needs.e2e-tests.result }}" == "success" && 
                "${{ needs.security-tests.result }}" == "success" && 
                "${{ needs.performance-tests.result }}" == "success" && 
                "${{ needs.accessibility-tests.result }}" == "success" ]]; then
            echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed. Check the individual job results above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi