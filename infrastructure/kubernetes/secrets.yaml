# Kubernetes Secrets for LivyFlow application
# Note: In production, use external secret management like AWS Secrets Manager, HashiCorp Vault, or Kubernetes External Secrets

apiVersion: v1
kind: Secret
metadata:
  name: livyflow-secrets
  namespace: livyflow-prod
  labels:
    app.kubernetes.io/name: livyflow
    app.kubernetes.io/instance: prod
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  # Database credentials (use AWS RDS managed passwords in production)
  DB_USERNAME: "postgres"
  DB_PASSWORD: "REPLACE_WITH_ACTUAL_PASSWORD"
  DATABASE_URL: "postgresql://postgres:REPLACE_WITH_ACTUAL_PASSWORD@livyflow-prod.cluster-xxxxx.us-east-1.rds.amazonaws.com:5432/livyflow"
  
  # Redis authentication
  REDIS_PASSWORD: "REPLACE_WITH_REDIS_AUTH_TOKEN"
  REDIS_URL: "redis://:REPLACE_WITH_REDIS_AUTH_TOKEN@livyflow-prod.xxxxx.cache.amazonaws.com:6379/0"
  
  # JWT and encryption keys
  SECRET_KEY: "REPLACE_WITH_STRONG_SECRET_KEY_32_CHARS_MIN"
  JWT_SECRET_KEY: "REPLACE_WITH_JWT_SECRET_KEY"
  ENCRYPTION_KEY: "REPLACE_WITH_ENCRYPTION_KEY"
  
  # Firebase configuration
  FIREBASE_PRIVATE_KEY: |
    -----BEGIN PRIVATE KEY-----
    REPLACE_WITH_FIREBASE_PRIVATE_KEY
    -----END PRIVATE KEY-----
  FIREBASE_PROJECT_ID: "livyflow-prod"
  FIREBASE_CLIENT_EMAIL: "firebase-adminsdk@livyflow-prod.iam.gserviceaccount.com"
  
  # Plaid API credentials
  PLAID_CLIENT_ID: "REPLACE_WITH_PLAID_CLIENT_ID"
  PLAID_SECRET: "REPLACE_WITH_PLAID_SECRET"
  PLAID_ENV: "production"
  
  # Email service credentials
  SMTP_PASSWORD: "REPLACE_WITH_SMTP_PASSWORD"
  SENDGRID_API_KEY: "REPLACE_WITH_SENDGRID_API_KEY"
  
  # External API keys
  OPENAI_API_KEY: "REPLACE_WITH_OPENAI_API_KEY"
  
  # Monitoring credentials
  NEW_RELIC_LICENSE_KEY: "REPLACE_WITH_NEW_RELIC_KEY"
  DATADOG_API_KEY: "REPLACE_WITH_DATADOG_API_KEY"

---
# Staging environment secrets
apiVersion: v1
kind: Secret
metadata:
  name: livyflow-secrets
  namespace: livyflow-staging
  labels:
    app.kubernetes.io/name: livyflow
    app.kubernetes.io/instance: staging
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  # Database credentials
  DB_USERNAME: "postgres"
  DB_PASSWORD: "REPLACE_WITH_STAGING_PASSWORD"
  DATABASE_URL: "postgresql://postgres:REPLACE_WITH_STAGING_PASSWORD@livyflow-staging.cluster-xxxxx.us-east-1.rds.amazonaws.com:5432/livyflow"
  
  # Redis authentication
  REDIS_PASSWORD: "REPLACE_WITH_STAGING_REDIS_AUTH"
  REDIS_URL: "redis://:REPLACE_WITH_STAGING_REDIS_AUTH@livyflow-staging.xxxxx.cache.amazonaws.com:6379/0"
  
  # JWT and encryption keys
  SECRET_KEY: "REPLACE_WITH_STAGING_SECRET_KEY"
  JWT_SECRET_KEY: "REPLACE_WITH_STAGING_JWT_SECRET"
  ENCRYPTION_KEY: "REPLACE_WITH_STAGING_ENCRYPTION_KEY"
  
  # Firebase configuration
  FIREBASE_PRIVATE_KEY: |
    -----BEGIN PRIVATE KEY-----
    REPLACE_WITH_FIREBASE_STAGING_PRIVATE_KEY
    -----END PRIVATE KEY-----
  FIREBASE_PROJECT_ID: "livyflow-staging"
  FIREBASE_CLIENT_EMAIL: "firebase-adminsdk@livyflow-staging.iam.gserviceaccount.com"
  
  # Plaid API credentials (sandbox)
  PLAID_CLIENT_ID: "REPLACE_WITH_PLAID_STAGING_CLIENT_ID"
  PLAID_SECRET: "REPLACE_WITH_PLAID_STAGING_SECRET"
  PLAID_ENV: "sandbox"
  
  # Email service credentials
  SMTP_PASSWORD: "REPLACE_WITH_STAGING_SMTP_PASSWORD"
  
  # External API keys
  OPENAI_API_KEY: "REPLACE_WITH_STAGING_OPENAI_KEY"

---
# TLS certificate secret (Let's Encrypt or custom certificates)
apiVersion: v1
kind: Secret
metadata:
  name: livyflow-tls
  namespace: livyflow-prod
  labels:
    app.kubernetes.io/name: livyflow
    app.kubernetes.io/instance: prod
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  # Base64 encoded certificate and key
  # These would be populated by cert-manager or manually
  tls.crt: LS0tLS1CRUdJTi... # REPLACE_WITH_BASE64_CERT
  tls.key: LS0tLS1CRUdJTi... # REPLACE_WITH_BASE64_KEY

---
# Image pull secret for private container registry
apiVersion: v1
kind: Secret
metadata:
  name: livyflow-registry
  namespace: livyflow-prod
  labels:
    app.kubernetes.io/name: livyflow
    app.kubernetes.io/instance: prod
    app.kubernetes.io/component: registry
type: kubernetes.io/dockerconfigjson
data:
  # Base64 encoded Docker registry credentials
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5hbWF6b25hd3MuY29tIjp7InVzZXJuYW1lIjoiQVdTIiwicGFzc3dvcmQiOiJSRVBMQUNFX1dJVEhfRUNSX1RPS0VOIiwiYXV0aCI6IlFWZFRPa0pFQUNFX1YxUlNfQUNSOV9WMWVVX1RQUVkifX19