import React, { useState, useEffect } from "react";
import { Budget, Transaction } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Plus, Target, AlertTriangle, CheckCircle, X } from "lucide-react";

const CATEGORIES = [
  { value: "food_dining", label: "Food & Dining" },
  { value: "transportation", label: "Transportation" },
  { value: "shopping", label: "Shopping" },
  { value: "entertainment", label: "Entertainment" },
  { value: "bills_utilities", label: "Bills & Utilities" },
  { value: "healthcare", label: "Healthcare" },
  { value: "education", label: "Education" },
  { value: "travel", label: "Travel" },
  { value: "groceries", label: "Groceries" },
  { value: "gas", label: "Gas" },
  { value: "home", label: "Home" },
  { value: "personal_care", label: "Personal Care" },
  { value: "gifts_charity", label: "Gifts & Charity" },
  { value: "business", label: "Business" },
  { value: "other", label: "Other" }
];

export default function Budgets() {
  const [budgets, setBudgets] = useState([]);
  const [transactions, setTransactions] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [currentMonth] = useState(new Date().toISOString().slice(0, 7) + '-01');
  const [formData, setFormData] = useState({
    category: '',
    monthly_limit: '',
    month: currentMonth
  });

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const [budgetsData, transactionsData] = await Promise.all([
        Budget.filter({ month: currentMonth }),
        Transaction.list()
      ]);
      
      setBudgets(budgetsData);
      setTransactions(transactionsData);
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await Budget.create({
        ...formData,
        monthly_limit: parseFloat(formData.monthly_limit)
      });
      setShowForm(false);
      setFormData({ category: '', monthly_limit: '', month: currentMonth });
      loadData();
    } catch (error) {
      console.error('Error creating budget:', error);
    }
  };

  const getSpentAmount = (category) => {
    const monthStart = currentMonth;
    const monthEnd = new Date(currentMonth);
    monthEnd.setMonth(monthEnd.getMonth() + 1);
    
    return Math.abs(transactions
      .filter(t => 
        t.category === category && 
        t.amount < 0 && 
        t.date >= monthStart && 
        t.date < monthEnd.toISOString().slice(0, 10)
      )
      .reduce((sum, t) => sum + t.amount, 0));
  };

  const getBudgetStatus = (spent, limit) => {
    const percentage = (spent / limit) * 100;
    if (percentage >= 100) return { status: 'over', color: 'text-red-600', bgColor: 'bg-red-500' };
    if (percentage >= 80) return { status: 'warning', color: 'text-yellow-600', bgColor: 'bg-yellow-500' };
    return { status: 'good', color: 'text-green-600', bgColor: 'bg-green-500' };
  };

  const existingCategories = budgets.map(b => b.category);
  const availableCategories = CATEGORIES.filter(cat => !existingCategories.includes(cat.value));

  if (isLoading) {
    return (
      <div className="p-6 md:p-8 min-h-screen bg-gray-50">
        <div className="max-w-6xl mx-auto">
          <div className="animate-pulse space-y-6">
            <div className="h-8 bg-gray-200 rounded w-48"></div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[...Array(6)].map((_, i) => (
                <div key={i} className="h-48 bg-gray-200 rounded-lg"></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 md:p-8 min-h-screen bg-gray-50">
      <div className="max-w-6xl mx-auto space-y-6">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Budget Tracker</h1>
            <p className="text-gray-600 mt-1">
              Set spending limits and track your progress for {new Date(currentMonth).toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
            </p>
          </div>
          <Button 
            onClick={() => setShowForm(true)}
            disabled={availableCategories.length === 0}
            className="bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700 gap-2"
          >
            <Plus className="w-4 h-4" />
            Add Budget
          </Button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {budgets.map((budget) => {
            const spent = getSpentAmount(budget.category);
            const percentage = Math.min((spent / budget.monthly_limit) * 100, 100);
            const status = getBudgetStatus(spent, budget.monthly_limit);
            
            return (
              <Card key={budget.id} className="shadow-lg border-0 hover:shadow-xl transition-shadow duration-300">
                <CardHeader className="pb-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className={`p-2 rounded-lg ${
                        status.status === 'over' ? 'bg-red-100' : 
                        status.status === 'warning' ? 'bg-yellow-100' : 'bg-green-100'
                      }`}>
                        {status.status === 'over' ? (
                          <AlertTriangle className="w-5 h-5 text-red-600" />
                        ) : status.status === 'warning' ? (
                          <Target className="w-5 h-5 text-yellow-600" />
                        ) : (
                          <CheckCircle className="w-5 h-5 text-green-600" />
                        )}
                      </div>
                      <CardTitle className="text-lg">
                        {CATEGORIES.find(c => c.value === budget.category)?.label}
                      </CardTitle>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm text-gray-600">Progress</span>
                        <span className={`text-sm font-medium ${status.color}`}>
                          {percentage.toFixed(1)}%
                        </span>
                      </div>
                      <Progress value={percentage} className="h-2" />
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4 pt-2">
                      <div>
                        <p className="text-xs text-gray-500">Spent</p>
                        <p className={`text-lg font-bold ${status.color}`}>
                          ${spent.toLocaleString()}
                        </p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-500">Budget</p>
                        <p className="text-lg font-bold text-gray-900">
                          ${budget.monthly_limit.toLocaleString()}
                        </p>
                      </div>
                    </div>
                    
                    <div className="pt-2 border-t">
                      <p className="text-xs text-gray-500">
                        Remaining: ${Math.max(0, budget.monthly_limit - spent).toLocaleString()}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {budgets.length === 0 && (
          <Card className="shadow-lg border-0">
            <CardContent className="text-center py-12">
              <div className="w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
                <Target className="w-8 h-8 text-gray-400" />
              </div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                No budgets set yet
              </h3>
              <p className="text-gray-600 mb-4">
                Create your first budget to start tracking your spending
              </p>
              <Button 
                onClick={() => setShowForm(true)}
                className="bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700"
              >
                Create Your First Budget
              </Button>
            </CardContent>
          </Card>
        )}

        {showForm && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <Card className="w-full max-w-md shadow-2xl">
              <CardHeader className="flex flex-row items-center justify-between">
                <CardTitle className="text-xl font-bold flex items-center gap-2">
                  <Target className="w-5 h-5 text-emerald-600" />
                  Add Budget
                </CardTitle>
                <Button variant="ghost" size="icon" onClick={() => setShowForm(false)}>
                  <X className="w-4 h-4" />
                </Button>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="category">Category</Label>
                    <Select 
                      value={formData.category} 
                      onValueChange={(category) => setFormData({...formData, category})}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select category" />
                      </SelectTrigger>
                      <SelectContent>
                        {availableCategories.map((cat) => (
                          <SelectItem key={cat.value} value={cat.value}>
                            {cat.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="limit">Monthly Limit</Label>
                    <Input
                      id="limit"
                      type="number"
                      step="0.01"
                      value={formData.monthly_limit}
                      onChange={(e) => setFormData({...formData, monthly_limit: e.target.value})}
                      placeholder="0.00"
                      required
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="month">Month</Label>
                    <Input
                      id="month"
                      type="month"
                      value={formData.month.slice(0, 7)}
                      onChange={(e) => setFormData({...formData, month: e.target.value + '-01'})}
                      required
                    />
                  </div>

                  <div className="flex gap-3 pt-4">
                    <Button 
                      type="button" 
                      variant="outline" 
                      onClick={() => setShowForm(false)} 
                      className="flex-1"
                    >
                      Cancel
                    </Button>
                    <Button 
                      type="submit" 
                      className="flex-1 bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700"
                    >
                      Add Budget
                    </Button>
                  </div>
                </form>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
}